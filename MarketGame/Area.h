#pragma once
#ifndef AREA_H
#define AREA_H

//////// LIBS
#include <string>
#include <list>
#include <memory>

//////// ME

// ME SAFE
#include "Entity.h"

// ME UNSAFE

// DECLARATIONS

//////////////////////////////////////////////////////////////////////////////////////////////////// >8)
//////////////////////////////////////////////////////////////////////////////////////////////////// Area.h
//////////////////////////////////////////////////////////////////////////////////////////////////// >8)

class Area : public Entity
{
	////////////////////////////////////////>~
	////////// Data
	////////////////////////////////////////>~
private:
	// aesthetic
	std::string description; // get
	std::string name; // get

	// position

	// tree structure
	std::list<Area> connectedAreas; // add remove

	//////////////////// Mutators
	//////////
public:
	std::string const & get_name() const { return name; };
	std::string const & get_description() const { return description; };

	void add_connectedArea(Area area);
	void remove_connectedArea() {}; // How to implement? what parameter to take?
	std::list<Area> const & get_connectedAreas() { return connectedAreas; };
	////////////////////////////////////////>~
	////////// Constructors
	////////////////////////////////////////>~
public:
	//////////////////// Ctor
	//////////
	Area(std::string description, std::string name);

	//////////////////// Dtor
	//////////

	//////////////////// Copy
	//////////

	//////////////////// Move
	//////////

	////////////////////////////////////////>~
	////////// Functions
	////////////////////////////////////////>~

	//////////////////// Public
	//////////
public:

	//////////////////// Private
	//////////
private:

	////////////////////////////////////////>~
	////////// Operators
	////////////////////////////////////////>~
public:
};

#endif