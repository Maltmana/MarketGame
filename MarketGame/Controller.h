#pragma once
#ifndef CONTROLLER_H
#define CONTROLLER_H

//////// LIBS

#include <string>
#include <sstream>
#include <cassert>

//////// ME

// SAFE
#include "Enums.h"

// UNSAFE
#include "GameModel.h"

//////// DECLARATIONS

//! Brief: Mutates model based on input.
/*!
What-Data: Input from console
What-Verb: mutates model
Where: In Game.
Why: Nicely contains all input operations
How: An unordered map of strings and functions which is given the input string.
Misc: Doesn't directly output anything to console.
*/
class Controller
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Data
	////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	GameModel & model;
	std::string inString;

	//////////////////// DataInterface
	//////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	void receive_input();
	void process_input();
	void act_on_input();

	//////////////////// FuncInterface
	//////////
public:
	void update();

	//////////////////// Operators
	//////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Constructors
	////////////////////////////////////////////////////////////////////////////////////////////////////
public:

	//////////////////// Ctor
	//////////
	explicit Controller(GameModel & model_);

	//////////////////// Dtor
	//////////

	//////////////////// Copy
	//////////
	explicit Controller(const Controller& other) = delete; // copy constructor
	Controller& operator=(const Controller& other) = delete; // copy assignment

	//////////////////// Move
	//////////
	explicit Controller(Controller&& other) noexcept = delete; // move constructor
	Controller& operator=(Controller&& other) noexcept = delete; // move assignment
};
#endif