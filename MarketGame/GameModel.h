#pragma once
#ifndef GAMEMODEL_H
#define GAMEMODEL_H

//////// LIBS
#include <list>
#include <map>
#include <string>
#include <bitset>

//////// ME

// SAFE
#include "Enums.h"

// UNSAFE
#include "Player.h"
#include "Area.h"

//////// DECLARATIONS

//! Brief:
/*!
What-Data:
What-Verb:
Where:
Why:
How:
Misc:
*/
class GameModel
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Data
	////////////////////////////////////////////////////////////////////////////////////////////////////
private:

	//////////////////// DataInterface
	//////////
public:
	// World Data
	Player player;
	std::list<Area> areas;
	int turnCount{ 0 };

	// Data that usually goes to the view...
	std::string helpstr{ "Default help string" };
	std::string debugstr{ "Default debug string" };

	// Tick resetting flags
	std::bitset<(size_t)Commands::LAST> commands;
	bool goodInput{ false };

	// Persistent flags

	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	void turn();
	void reset_temp_state();

	//////////////////// FuncInterface
	//////////
public:
	void build();
	void update();


	//////////////////// Operators
	//////////
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Constructors
	////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	//////////////////// Ctor
	//////////

	//////////////////// Dtor
	//////////

	//////////////////// Copy
	//////////
	explicit GameModel(const GameModel& other) = delete; // copy constructor
	GameModel& operator=(const GameModel& other) = delete; // copy assignment

	//////////////////// Move
	//////////
	explicit GameModel(GameModel&& other) noexcept = delete; // move constructor
	GameModel& operator=(GameModel&& other) noexcept = delete; // move assignment
};

#endif